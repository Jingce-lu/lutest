(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{361:function(e){e.exports=JSON.parse('{"msg":"success","result":{"list":[{"audit_flag":0,"corp_tag":["爱范儿"],"date":"Fri, 19 Jun 2020 16:20:44 GMT","favorite_num":6,"qid":705,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":705,"subject":"","title":"移动 web 开发时如何调试？了解哪些多屏适配方案？"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["安居客"],"date":"Fri, 19 Jun 2020 16:20:44 GMT","favorite_num":6,"qid":739,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":739,"subject":"","title":"小程序里面打开页面最多多少，生命周期、常用的 api 列举几个？"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["快手"],"date":"Fri, 19 Jun 2020 16:20:44 GMT","favorite_num":8,"qid":749,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":749,"subject":"","title":"用 typescript 实现函数 caller，接收一个函数作为第一个参数，其返回参数类型由接收的函数参数决定"},"tech_tag":["其它","编程题"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["宝宝树"],"date":"Fri, 19 Jun 2020 16:20:43 GMT","favorite_num":5,"qid":518,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":518,"subject":"","title":"介绍 MVP 怎么组织"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["海风教育"],"date":"Fri, 19 Jun 2020 16:20:43 GMT","favorite_num":4,"qid":553,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":553,"subject":"","title":"进程和线程的区别"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["快手"],"date":"Fri, 19 Jun 2020 16:20:43 GMT","favorite_num":6,"qid":669,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":669,"subject":"","title":"使用 typescript 的优势有哪些"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["酷狗"],"date":"Fri, 19 Jun 2020 16:20:43 GMT","favorite_num":4,"qid":681,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":681,"subject":"","title":"谈下淘宝和京东页面的实现"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["酷狗"],"date":"Fri, 19 Jun 2020 16:20:43 GMT","favorite_num":4,"qid":683,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":683,"subject":"","title":"如何监控 MySql、Redis 性能"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":[],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":4,"qid":332,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":332,"subject":"","title":"使用 typescript 的装饰器能否实现函数调用前出现加载动画，调用后关闭，如果能，这个加载动画的控制代码是放在哪种装饰器上呢"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":[],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":4,"qid":333,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":333,"subject":"","title":"unicode 和 utf8 的关系"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":[],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":4,"qid":337,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":337,"subject":"","title":"是否了解 docker，介绍一下"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["阿里","喜马拉雅"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":4,"qid":360,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":360,"subject":"","title":"项目中如何处理安全问题"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["滴滴"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":4,"qid":383,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":383,"subject":"","title":"整个前端性能提升大致分几类"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["道一云"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":4,"qid":390,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":390,"subject":"```js\\nA.axios 可以跨平台，支持 promise 的所有 API\\nB.可以拦截请求和响应\\nC.可以转换请求数据和响应数据，并对响应回来的内容自动转换为 json 类型的数据\\nD.安全性更高，客户端支持防御 XSRF\\n\\n```\\n","title":"以下 axios 的特点正确的有哪些？(多选题)"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["滴滴"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":4,"qid":400,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":400,"subject":"","title":"安卓 Activity 之间数据是怎么传递的"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["滴滴"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":4,"qid":401,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":401,"subject":"","title":"安卓 4.0 到 6.0 过程中 WebView 对 js 兼容性的变化"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["滴滴"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":4,"qid":402,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":402,"subject":"","title":"WebView 和原生是如何通信"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["有赞"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":4,"qid":409,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":409,"subject":"","title":"Linux 754 介绍"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["挖财"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":4,"qid":433,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":433,"subject":"","title":"如何做工程上的优化"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["饿了么"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":4,"qid":451,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":451,"subject":"","title":"小程序里面可以打开的页面是多少"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["喜马拉雅"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":4,"qid":474,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":474,"subject":"","title":"Access-Control-Allow-Origin 在服务端哪里配置"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["喜马拉雅"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":4,"qid":475,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":475,"subject":"","title":"前端和后端怎么联调"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["滴滴"],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":4,"qid":191,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":191,"subject":"","title":"gitlab 分支管理，线上如果发生 bug 怎么解决？"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["虎扑"],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":4,"qid":272,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":272,"subject":"","title":"mvvm 模型和 mvc 模型区别"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["虎扑"],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":4,"qid":274,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":274,"subject":"","title":"如何实现一个 mvvm 模型"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["腾讯应用宝","寺库"],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":4,"qid":291,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":291,"subject":"","title":"RN、Weex、Dart 的优缺点"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":[],"date":"Fri, 19 Jun 2020 16:20:40 GMT","favorite_num":4,"qid":51,"qtype":"short_answer","short_answer":{"analysis":"### 答案\\n\\nWebp是一种支持有损压缩和无损压缩的图片文件格式，派生自图像编码格式VP8。与png、jpg相比，相同的视觉体验下，WebP图像的尺寸缩小了大约30％。另外，WebP图像格式还支持有损压缩、无损压缩、透明和动画。\\n\\n#### 一、WebP转换工具\\n\\n**1）使用`Google`提供的标准工具**\\n\\n**①cwebp**\\n\\n![cwebp](http://img-static.yidengxuetang.com/wxapp/issue-img/cwop.png)\\n\\n**②isparta:** 是对 WebP 和 APNG 两种新型图片格式的转化而开发的一款桌面应用，支持图片批量转换为 WebP，同时提供多种参数配置。\\n\\n**2）webp-webpack-plugin**\\n\\n用于生成 `.webp`格式图片的webpack插件。\\n\\n**3）gulp-webp**\\n\\n```js\\nconst gulp = require(\'gulp\');\\nconst webp = require(\'gulp-webp\');\\n    \\ngulp.task(\'default\', () =>\\n    gulp.src(\'src/image.jpg\')\\n       .pipe(webp())\\n       .pipe(gulp.dest(\'dist\'))\\n);\\n```\\n\\n对ie的兼容性不好，现在主要是对谷歌浏览器的兼容，最新的safari14-tp也可以兼容了\\n\\n\\n\\n#### 二、浏览器兼容性及使用方案\\n\\n截止2020年6月24日，在 can i use，上的查询显示全球 WebP 的支持程度已经达到 78.65%\\n\\n![webp](http://img-static.yidengxuetang.com/wxapp/issue-img/webp.png)\\n\\n浏览器端使用方案主要是进行javaScript 能力检测，对支持 WebP 的用户输出 WebP 图片，不支持的进行降级处理。\\n\\n浏览器Webp支持检测方式有HTML picture、嗅探、Request Header等等\\n\\n**1）HTML5 picture**\\n\\n这种方法不进行 WebP 支持程度的判断，而是利用 html5 picture 元素的特性，允许开发者列举出多个图片地址，浏览器根据顺序展示出第一个能够展现的图片元素，如\\n\\n```html\\n<picture>\\n    <source type=\\"image/webp\\" srcset=\\"images/webp.webp\\">\\n    <img src=\\"images/webp.jpg\\" alt=\\"webp image\\">\\n</picture>\\n```\\n\\n**2）嗅探**\\n\\n嗅探的方式是指直接向浏览器中插入一段 base64 的 WebP 图片，检测图片是否能够正常加载，依据该方法进而判断支持程度，如官方给出的嗅探函数：\\n\\n```js\\n// check_webp_feature:\\n//   \'feature\' can be one of \'lossy\', \'lossless\', \'alpha\' or \'animation\'.\\n//   \'callback(feature, result)\' will be passed back the detection result (in an asynchronous way!)\\nfunction check_webp_feature(feature, callback) {\\n    var kTestImages = {\\n        lossy: \\"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA\\",\\n        lossless: \\"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==\\",\\n        alpha: \\"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==\\",\\n        animation: \\"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA\\"\\n    };\\n    var img = new Image();\\n    img.onload = function () {\\n        var result = (img.width > 0) && (img.height > 0);\\n        callback(feature, result);\\n    };\\n    img.onerror = function () {\\n        callback(feature, false);\\n    };\\n    img.src = \\"data:image/webp;base64,\\" + kTestImages[feature];\\n}\\n```\\n\\n其中包含了对有损、无损、透明图、动图等 WebP 图片的嗅探，这是一种最为保险的方法。不过缺点也很明显，在图片类型不一且量级较大的情况下，前端并不能知道哪些图片是有损，无损，亦或是透明的，也没有办法对其中一种特定类型做特定策略，所以即使知道不支持该类型的 WebP，然而我们也没有办法主观的去做容错。所以这种方法只适合于图片类型单一的情况，如开发者知道所有图片都是有损的，或是动图等，有针对性的去处理。\\n\\n同时在处理的过程中，为了提高嗅探效率，嗅探之后可以将结果以本地存储的方式进行保存，如cookie ，方便下次直接进行调用。\\n\\n\\n**2）Request Header**\\n\\n这种方式是较为符合标准的解决方案，浏览器在支持 WebP 图片格式的情况下，会在请求的 http header accept 中携带 webp/image 的字段，后端接收到请求之后可以按照该形式来判断是否返回 WebP 图片内容。\\n\\nMIP 在实践中采用的是该方法，当用户访问 MIP Cache 上的页面时，不需要开发者替换图片，MIP Cache 根据 http header 自动决定是否返回 WebP 图片内容。\\n","answer":"","biz_type":1,"qid":51,"subject":"","title":"Webp 格式的图片怎么生成，使用有什么兼容性问题，如何怎么解决"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":[],"date":"Fri, 19 Jun 2020 16:20:40 GMT","favorite_num":4,"qid":42,"qtype":"short_answer","short_answer":{"analysis":"### 答案\\n\\n**MySQL**\\n\\n1. 在不同的引擎上有不同的存储方式。\\n2. 查询语句是使用传统的sql语句，拥有较为成熟的体系，成熟度很高。\\n3. 开源数据库的份额在不断增加，mysql的份额页在持续增长。\\n\\n> MySQl的缺点就是在海量数据处理的时候效率会显著变慢。\\n\\n**MongoDB**\\n\\nMongoDB是非关系型文档类型(即可存放xml、bson、json等自述性类型，结构为分层树状的数据)数据库\\n\\n1. 数据结构由键值对组成\\n2. 虚拟内存+持久化的存储方式\\n3. 结构特点为可以通过副本集，以及分片来实现高可用\\n4. 数据是存储在硬盘上的，只不过需要经常读取的数据会被加载到内存中，将数据存储在物理内存中，从而达到高速读写。\\n\\n**MongoDB优点**\\n\\n1. 适量级的内存的MongoDB性能迅速。它将热数据存储在物理内存中，使热数据读写非常快。\\n2. MongoDB的高可用和集群架构拥有十分高的扩展性。\\n3. 在副本集中，当主库遇到问题，无法继续提供服务的时候，副本集将选举一个新的主库继续提供服务。\\n4. MongoDB的Bson和Json格式的数据十分适合文档格式的存储与查询。\\n\\n**MongoDB缺点**\\n\\n1. MongoDB本身没有自带事务机制，若需要实现事务机制，需通过一个额外的表，从逻辑上自行实现事务。\\n2. 占用空间过大。\\n3. 由于NoSQL兴起时间短，应用经验相比关系型数据库较少。\\n","answer":"","biz_type":1,"qid":42,"subject":"","title":"mysql 和 mongodb 区别"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["洋葱学院"],"date":"Fri, 19 Jun 2020 16:20:40 GMT","favorite_num":4,"qid":34,"qtype":"short_answer","short_answer":{"analysis":"### 答案\\n\\n#### 什么是 Umi\\n\\nUmi 是一个基于 React 的前端应用框架，包含了项目路由、构建、部署、测试等功能，还封装了前端开发所需要的请求库、hooks库、数据管理、国际化等。是一个倾向业务的全面的前端框架。\\n\\n#### 为什么出现 Umi\\n\\n1. 让前期项目构建更简单减少了，如 Webpack、Babel、TypeScript、服务端渲染、测试、代码规范规则等配置。\\n2. 让项目减少了业务层面的配置，如UI库、配置路由、动态路由、国际化、数据管理Mock数据等。\\n3. 为了聚合阿里系的技术如 antd、dva、Umi等，扩大自身的技术影响。\\n\\n总的来说：Umi 的出现就是为了能够简单、快速的构建一个基于 React 的前端项目，减少构建配置的时间和学习成本。\\n\\n#### Umi 的不足\\n\\n1. Umi 有一套自己的配置写法，会有一定的学习成本。\\n2. Umi 的文档和 APi 可能不够完善，而且与 Webpack、Babel等配置写法有区别，解决 bug 相对困难。\\n3. Umi 相对比较新，更新可能比较频繁，对于后期基于 Umi 的版本升级会造成一定的维护成本。\\n4. 长期使用这类框架对自身的技术提升有一定的局限。\\n5. Umi 默认配置依赖项比较多，不易针对开发的实际情况进行删减或者替换相应配置依赖项或者技术框架。\\n6. Umi 的内部实现相对黑盒，对于定制化的配置、优化和升级相对困难。\\n\\n------\\n\\n#### 什么是 dva\\n\\ndva 是一个基于 redux 和 redux-saga 的数据流解决方案。可以将一个 Store 分为多个 modal，modal 之间相互独立，但又可以通过 Store 相互关联，数据流向清晰，书写方便，modal 的扩展性和复用性高。\\n\\n#### 为什么出现 dva\\n\\n1. redux 系的学习成本比较高，代码量比较大，后期的维护成本比高。\\n2. mobx 的书写相对灵活，但是数据流向相对难以追踪，而且多个 Store 之间的调用和数据共享不太方便。\\n\\n总的来说：dva 的出现是弥补 redux 的缺点，但又没有增加新的概念，也没有过多的创建新的语法，增加了不使用 mobx 的一种选择。\\n\\n#### 不足\\n\\n1. 社区相对较少，对于写法上有一定的局限。\\n2. 对于版本的迭代更新会有一定的维护成本。\\n3. 需要对路由进行改造。\\n","answer":"","biz_type":1,"qid":34,"subject":"","title":"Umi 和 dva 分别是干嘛用的？为什么会有 umi dva 的出现？使用起来有什么不方便的地方吗？"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["快手"],"date":"Fri, 19 Jun 2020 16:20:40 GMT","favorite_num":4,"qid":73,"qtype":"short_answer","short_answer":{"analysis":"### 一、微信小程序的架构\\n\\n#### 1.介绍\\n\\n微信小程序视图层是 WebView，逻辑层是 JS 引擎。三端的脚本执行环境以及用于渲染非原生组件的环境是各不相同的\\n\\n**运行环境**\\n\\n- Android\\n- iOS\\n- 小程序开发者工具\\n\\n**逻辑层**\\n\\n- V8\\n- JavaScriptCore\\n- NWJS\\n\\n**渲染层**\\n\\n- Chromium定制内核\\n- WKWebview\\n- Chrome Webview\\n\\n#### 2.设计原理与组成部分\\n\\n**1）双线程模型**\\n\\n小程序的渲染层和逻辑层分别由2个线程管理：\\n\\n- 渲染层：界面渲染相关的任务全都在WebView线程里执行。一个小程序存在多个界面，所以渲染层存在多个WebView线程。\\n- 逻辑层：采用JsCore线程运行JS脚本。\\n\\n视图层和逻辑层通过系统层的WeixinJsBridage进行通信：逻辑层把数据变化通知到视图层，触发视图层页面更新，视图层把触发的事件通知到逻辑层进行业务处理。\\n\\n（页面渲染的具体流程是：在渲染层，宿主环境会把WXML转化成对应的JS对象，在逻辑层发生数据变更的时候，我们需要通过宿主环境提供的setData方法把数据从逻辑层传递到渲染层，再经过对比前后差异，把差异应用在原来的Dom树上，渲染出正确的UI界面）\\n\\n![模型](http://img-static.yidengxuetang.com/wxapp/issue-img/qid-73-wxmodel.png)\\n\\n双线程模型是小程序框架与业界大多数前端Web框架不同之处。基于这个模型，可以更好地管控以及提供更安全的环境。缺点是带来了无处不在的异步问题（任何数据传递都是线程间的通信，也就是都会有一定的延时），不过小程序在框架层面已经封装好了异步带来的时序问题。\\n\\n**2）组件系统**\\n\\n小程序是有自己的组件的，这些基本组件就是基于Exparser框架。Exparser基于WebComponents的ShadowDOM模型，但是不依赖浏览器的原生支持，而且可在纯JS环境中运行。\\n\\nExparser 内置在小程序基础库中，为小程序的各种组件提供基础的支持。小程序内的所有组件，包括内置组件和自定义组件，Exparser 会维护整个页面的节点树相关信息，包括节点的属性、事件绑定等，相当于一个简化版的 Shadow DOM 实现\\n\\n**3）原生组件**\\n\\n在内置组件中，有一些组件并不完全在Exparser的渲染体系下，而是由客户端原生参与组件的渲染。比如说Map组件。它渲染的层级比在WebView层渲染的普通组件要高。\\n\\n**4）运行机制**\\n\\n①启动\\n\\n- 热启动：假如用户已经打开过某小程序，然后在一定时间内再次打开该小程序，此时无需重新启动，只需将后台态的小程序切换到前台，这个过程就是热启动；\\n- 冷启动：用户首次打开或小程序被微信主动销毁后再次打开的情况，此时小程序需要重新加载启动，即冷启动。\\n\\n②销毁\\n\\n只有当小程序进入后台一定时间，或者系统资源占用过高，才会被真正的销毁。\\n\\n**5）更新机制**\\n\\n开发者在后台发布新版本之后，无法立刻影响到所有现网用户，但最差情况下，也在发布之后 24 小时之内下发新版本信息到用户。\\n\\n小程序每次冷启动时，都会检查是否有更新版本，如果发现有新版本，将会异步下载新版本的代码包，并同时用客户端本地的包进行启动，即新版本的小程序需要等下一次冷启动才会应用上。\\n\\n所以如果想让用户使用最新版本的小程序，可以利用`wx.getUpdateManager`做个检查更新的功能：\\n\\n```js\\ncheckNewVersion() {    const updateManager = wx.getUpdateManager();\\n    updateManager.onCheckForUpdate((res) => {      \\n      console.log(\'hasUpdate\', res.hasUpdate);// 请求完新版本信息的回调\\n      if (res.hasUpdate) {\\n        updateManager.onUpdateReady(() => {        \\n          this.setData({  \\n            hasNewVersion: true\\n          });\\n        });\\n      }\\n    });\\n  }\\n```\\n\\n### 二、小程序为什么使用双线程\\n\\n小程序的渲染层和逻辑层分别由两个线程管理：渲染层的界面使用 WebView 进行渲染；逻辑层采用 JSCore 运行 JavaScript 代码。一个小程序存在多个界面，所以渲染层存在多个 WebView。这两个线程间的通信经由小程序 Native 侧中转，逻辑层发送网络请求也经由 Native 侧转发。\\n\\n![线程](http://img-static.yidengxuetang.com/wxapp/issue-img/qid-73-thread.png)\\n\\n小程序架构设计时，要求渲染快，加载快，渲染页面的技术主要分为三种：\\n\\n1）纯客户端原生技术渲染(纯客户端技术需要与微信代码一起编包，跟随微信发布版本，这样的开发节奏不对)；\\n\\n2）纯web技术渲染(纯web技术，那么一些复杂交互页面可能面临一些性能问题，因为Web技术中，UI和JS的脚本在单线程中，这样容易导致逻辑任务抢占UI渲染资源。)；\\n\\n3）介于客户端技术和Web技术之间（Hybrid技术）。\\n\\n最终选取的是类似微信JSSDK之后这样的HyBrid技术，页面用Web技术渲染，辅之以大量的接口提供丰富的客户端原生能力。同时，每个小程序的页面都是使用不同的WebView渲染。\\n\\n如果开发者可以直接通过JS操作界面的DOM树，那么一些敏感数据就毫无安全性可言，故微信提供了一个沙箱的环境来运行开发者的JS代码，这个环境不能有任何的浏览器先关的接口，只能通过JS解释执行环境，类似于HTML5的ServiceWorker启动另一个线程来执行JS。\\n\\n但由于小程序是多WebView的架构，所以每一个页面都是不同的WebView渲染显示，所以单独创建了一个线程去执行JS，也就是逻辑层，而界面渲染的任务都在WebView线程里执行（渲染层）。即双线程模型，将逻辑层与视图层进行分离，视图层和逻辑层之间只有数据的通信，可以防止开发者随意操作界面，更好的保证了用户数据安全。\\n\\n\\n\\n\\n\\n","answer":"","biz_type":1,"qid":73,"subject":"","title":"谈一下微信小程序的架构以及为什么要用到双线程"},"tech_tag":["其它"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["顺丰"],"date":"Fri, 19 Jun 2020 16:20:40 GMT","favorite_num":4,"qid":127,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":127,"subject":"","title":"如果有一个项目，随着业务的增长越来越大，怎么办，如何来进行一个拆分或者处理"},"tech_tag":["其它"],"uid":0,"uname":""}],"page":1,"pages":1,"uid":4510},"status":0}')}}]);