(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{566:function(t,s,a){"use strict";a.r(s);var n=a(54),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"react-源码中如何实现受控组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-源码中如何实现受控组件"}},[t._v("#")]),t._v(" React 源码中如何实现受控组件")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#直接改变-value-的问题"}},[t._v("直接改变 value 的问题")])]),a("li",[a("a",{attrs:{href:"#用非受控的形式实现受控组件"}},[t._v("用非受控的形式实现受控组件")])]),a("li",[a("a",{attrs:{href:"#总结"}},[t._v("总结")])])])]),a("p"),t._v(" "),a("p",[t._v("今天我们站在框架开发者的角度来聊聊如何实现"),a("code",[t._v("受控组件")]),t._v("。")]),t._v(" "),a("p",[t._v("在 React 中一个简单的"),a("code",[t._v("受控组件")]),t._v("如下：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("App")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" updateNum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onChange")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateNum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" onChange"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("onChange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("在 "),a("code",[t._v("onChange")]),t._v(" 中会更新 "),a("code",[t._v("num")]),t._v("，"),a("code",[t._v("num")]),t._v(" 作为 "),a("code",[t._v("value prop")]),t._v(" 传递给"),a("code",[t._v("<input/>")]),t._v("，达到 "),a("code",[t._v("value")]),t._v(" 受控的目的。")]),t._v(" "),a("p",[t._v("如果让你来设计，你会怎么做？")]),t._v(" "),a("p",[t._v("我相信大部分同学第一个想法是：将 "),a("code",[t._v("value prop")]),t._v(" 与其他 "),a("code",[t._v("attribute prop")]),t._v(" 一样处理就行。")]),t._v(" "),a("p",[t._v("我们知道 React 内部运行有 3 个阶段：")]),t._v(" "),a("ul",[a("li",[t._v("schedule 调度更新阶段")]),t._v(" "),a("li",[t._v("render 进行 diff 算法的阶段")]),t._v(" "),a("li",[t._v("commit 进行 DOM 操作的阶段")])]),t._v(" "),a("p",[t._v("假设我们要在 "),a("code",[t._v("onChange")]),t._v(" 中触发更新改变 "),a("code",[t._v("className")]),t._v("，只需要在 "),a("code",[t._v("render")]),t._v(" 阶段记录要改变的 "),a("code",[t._v("className")]),t._v("，在 "),a("code",[t._v("commit")]),t._v(" 阶段执行对应的 "),a("code",[t._v("addClass DOM")]),t._v(" 操作。")]),t._v(" "),a("p",[t._v("同样的，如果我们要在 "),a("code",[t._v("onChange")]),t._v(" 中触发更新改变 "),a("code",[t._v("value")]),t._v("，只需要在 "),a("code",[t._v("render")]),t._v(" 阶段记录要改变的 "),a("code",[t._v("value")]),t._v("，在 "),a("code",[t._v("commit")]),t._v(" 阶段执行对应的 "),a("code",[t._v("inputDOM.setAttribute('value', value)")]),t._v("操作。")]),t._v(" "),a("p",[t._v("这样逻辑非常通顺。那么事实上呢？")]),t._v(" "),a("h2",{attrs:{id:"直接改变-value-的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#直接改变-value-的问题"}},[t._v("#")]),t._v(" 直接改变 value 的问题")]),t._v(" "),a("p",[a("code",[t._v("className")]),t._v(" 只是 "),a("code",[t._v("inputDOM")]),t._v(" 上的一个普通属性。而 "),a("code",[t._v("value")]),t._v(" 则涉及到输入框光标的位置。")]),t._v(" "),a("p",[t._v("如果我们直接修改 "),a("code",[t._v("value")]),t._v("，那么属性改变后 "),a("code",[t._v("input")]),t._v(" 的光标输入位置也会丢失，光标会跳到输入框的最后。")]),t._v(" "),a("p",[t._v("想想我们将 1234 修改为 12534。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12534")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("需要先将光标位置移动到 2 之后，再输入 5。")]),t._v(" "),a("p",[t._v("如果"),a("code",[t._v("setAttribute('value', '12534')")]),t._v("，那么光标不会保持在 5 后面而是跳到 4 后面。")]),t._v(" "),a("p",[t._v("那么 "),a("code",[t._v("React")]),t._v(" 如何解决这个问题呢？")]),t._v(" "),a("h2",{attrs:{id:"用非受控的形式实现受控组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用非受控的形式实现受控组件"}},[t._v("#")]),t._v(" 用非受控的形式实现受控组件")]),t._v(" "),a("p",[t._v("你没有看错，"),a("code",[t._v("React")]),t._v(" 用"),a("code",[t._v("非受控")]),t._v("形式实现了"),a("code",[t._v("受控组件")]),t._v("的逻辑。")]),t._v(" "),a("p",[t._v("简单的说，不同于 "),a("code",[t._v("className")]),t._v(" 在 "),a("code",[t._v("commit")]),t._v(" 阶段受控更新，"),a("code",[t._v("value")]),t._v(" 则完全是非受控的形式，只在必要的时候受控更新。")]),t._v(" "),a("p",[t._v("因为一旦更新 "),a("code",[t._v("value")]),t._v("，那么光标位置就会丢失。")]),t._v(" "),a("p",[t._v("我们稍微修改下 Demo，"),a("code",[t._v("input")]),t._v(" 为受控组件，"),a("code",[t._v("value")]),t._v(" 始终为 1：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("App")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("当我们在源码中打上断点，输入 2 后，实际上会先显示 12，再删掉 2。")]),t._v(" "),a("p",[t._v("只不过这个删除的过程是同步的所以看起来输入框内始终只有 1。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:t.$withBase("/images/brochure/2020102201.webp"),alt:"brochure/2020102201.webp"}})]),t._v(" "),a("p",[t._v("所以，不同于 "),a("code",[t._v("React")]),t._v(" 其他组件 "),a("code",[t._v("props")]),t._v(" 的更新会经历 "),a("code",[t._v("schedule - render - commit")]),t._v(" 流程。")]),t._v(" "),a("p",[t._v("对于 "),a("code",[t._v("input")]),t._v("、"),a("code",[t._v("textarea")]),t._v("、"),a("code",[t._v("select")]),t._v("，"),a("code",[t._v("React")]),t._v(" 有一条单独的更新路径，这条路径触发的更新被称为 "),a("code",[t._v("discreteUpdate")]),t._v("。")]),t._v(" "),a("p",[t._v("这条路径的工作流程如下：")]),t._v(" "),a("ol",[a("li",[t._v("先以"),a("code",[t._v("非受控")]),t._v("的形式更新表单 DOM")]),t._v(" "),a("li",[t._v("以"),a("code",[t._v("同步")]),t._v("的优先级开启一次更新")]),t._v(" "),a("li",[t._v("更新后的 "),a("code",[t._v("value")]),t._v(" 在 "),a("code",[t._v("commit")]),t._v(" 阶段并不会像其他 "),a("code",[t._v("props")]),t._v(" 一样作用于 "),a("code",[t._v("DOM")])]),t._v(" "),a("li",[t._v("调用 "),a("code",[t._v("restoreStateOfTarget")]),t._v(" 方法，比较 DOM 的实际 "),a("code",[t._v("value")]),t._v("（即步骤 1 中的非受控 value）与步骤 3 中更新的 "),a("code",[t._v("value")]),t._v("，如果相同则退出，如果不同则用步骤 3 的 "),a("code",[t._v("value")]),t._v(" 更新 DOM")])]),t._v(" "),a("p",[t._v("什么情况下这 2 个 "),a("code",[t._v("value")]),t._v(" 会相同呢？")]),t._v(" "),a("p",[t._v("我们正常的受控组件就是相同的情况：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("App")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" updateNum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onChange")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateNum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" onChange"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("onChange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("什么情况下这 2 个 value 会不同呢？")]),t._v(" "),a("p",[t._v("上面的 Demo 中，虽然受控，但是没有调用 updateNum 更新 value 的情况：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("App")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("在这种情况下，步骤 1 的"),a("code",[t._v("非受控 value")]),t._v(" 变为了 12，步骤 3 的"),a("code",[t._v("受控 value")]),t._v(" 还是 1，所以最终会用 1 再更新下 DOM 的 "),a("code",[t._v("value")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("可以看到，要实现一个完备的前端框架，是有非常多细节的。")]),t._v(" "),a("p",[t._v("为了实现受控组件，就得脱离整体更新流程，单独实现一套流程。")])])}),[],!1,null,null,null);s.default=e.exports}}]);