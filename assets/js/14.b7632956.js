(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{385:function(n){n.exports=JSON.parse('{"msg":"success","result":{"list":[{"audit_flag":0,"corp_tag":["滴滴"],"date":"Fri, 19 Jun 2020 16:21:40 GMT","favorite_num":21,"qid":12,"qtype":"short_answer","short_answer":{"analysis":"1）伪类(pseudo-classes)\\n- 其核⼼就是⽤来选择DOM树之外的信息,不能够被普通选择器选择的⽂档之外的元素，⽤来添加⼀些选择器的特殊效果。\\n- ⽐如:hover :active :visited :link :visited :first-child :focus :lang等\\n- 由于状态的变化是⾮静态的，所以元素达到⼀个特定状态时，它可能得到⼀个伪类的样式；当状态改变时，它⼜会失去这个样式。\\n- 由此可以看出，它的功能和class有些类似，但它是基于⽂档之外的抽象，所以叫 伪类。\\n\\n2）伪元素(Pseudo-elements)\\n- DOM树没有定义的虚拟元素\\n- 核⼼就是需要创建通常不存在于⽂档中的元素，\\n- ⽐如::before ::after 它选择的是元素指定内容，表示选择元素内容的之前内容或之后内容。\\n- 伪元素控制的内容和元素是没有差别的，但是它本身只是基于元素的抽象，并不存在于⽂档中，所以称为伪元素。⽤于将特殊的效果添加到某些选择器\\n\\n2）伪类与伪元素的区别\\n- 表示⽅法\\n  - CSS2 中伪类、伪元素都是以单冒号:表示,\\n  - CSS2.1 后规定伪类⽤单冒号表示,伪元素⽤双冒号::表示，\\n  - 浏览器同样接受 CSS2 时代已经存在的伪元素(:before, :after, :first\\\\ufffeline, :first-letter 等)的单冒号写法。\\n  - CSS2 之后所有新增的伪元素(如::selection)，应该采⽤双冒号的写法。\\n  - CSS3中，伪类与伪元素在语法上也有所区别，伪元素修改为以::开头。浏览器对以:开头的伪元素也继续⽀持，但建议规范书写为::开头\\n\\n- 定义不同\\n  - 伪类即假的类，可以添加类来达到效果\\n  - 伪元素即假元素，需要通过添加元素才能达到效果\\n- 总结:\\n  - 伪类和伪元素都是⽤来表示⽂档树以外的\\"元素\\"。\\n  - 伪类和伪元素分别⽤单冒号:和双冒号::来表示。\\n  - 伪类和伪元素的区别，关键点在于如果没有伪元素(或伪类)，\\n  - 是否需要添加元素才能达到效果，如果是则是伪元素，反之则是伪类。\\n\\n4）相同之处：\\n- 伪类和伪元素都不出现在源⽂件和DOM树中。也就是说在html源⽂件中是看不到伪类和伪元素的。\\n不同之处：\\n- 伪类其实就是基于普通DOM元素⽽产⽣的不同状态，他是DOM元素的某⼀特征。\\n- 伪元素能够创建在DOM树中不存在的抽象对象，⽽且这些抽象对象是能够访问到的。","answer":"","biz_type":1,"qid":12,"subject":"","title":"css 伪类与伪元素区别"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["头条"],"date":"Fri, 19 Jun 2020 16:20:44 GMT","favorite_num":4,"qid":772,"qtype":"short_answer","short_answer":{"analysis":"### 代码实现\\n\\n#### 1.实现一\\n\\n- postion+transform 实现水平垂直居中\\n- padding-top 实现高是宽的50%\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n\\n<head>\\n  <meta charset=\\"UTF-8\\">\\n  <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">\\n  <meta http-equiv=\\"X-UA-Compatible\\" content=\\"ie=edge\\">\\n  <title>居中</title>\\n</head>\\n\\n<body>\\n  <style>\\n    html,\\n    body {\\n      width: 100%;\\n      height: 100%;\\n      padding: 0;\\n      margin: 0;\\n    }\\n\\n    .wrap {\\n      width: 100%;\\n      height: 100%;\\n      background-color: bisque;\\n      position: relative;\\n    }\\n\\n    .A {\\n      font-size: 20px;\\n      text-align: center;\\n      background-color: blueviolet;\\n      position: absolute;\\n      top: 50%;\\n      left: 10px;\\n      right: 10px;\\n      transform: translate(0, -50%);\\n      padding-top: 50%;\\n    }\\n\\n    .f {\\n      position: absolute;\\n      left: 50%;\\n      top: 50%;\\n      transform: translate(-50%, -50%);\\n    }\\n  </style>\\n  <div class=\\"wrap\\">\\n    <div class=\\"A\\">\\n      <div class=\\"f\\">A</div>\\n    </div>\\n  </div>\\n</body>\\n\\n</html>\\n```\\n\\n#### 2.实现二\\n\\n- calc+vw\\n\\n```js\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n\\n<head>\\n  <meta charset=\\"UTF-8\\">\\n  <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">\\n  <meta http-equiv=\\"X-UA-Compatible\\" content=\\"ie=edge\\">\\n  <title>居中</title>\\n</head>\\n\\n<body>\\n  <style>\\n    * {\\n      padding: 0;\\n      margin: 0;\\n    }\\n\\n    .A {\\n      margin: 0 10px;\\n      text-align: center;\\n      font-size: 20px;\\n      position: absolute;\\n      top: 50%;\\n      transform: translateY(-50%);\\n      width: calc(100vw - 20px);\\n      height: calc(50vw - 10px);\\n      line-height: calc(50vw - 10px);\\n      background-color: aquamarine;\\n    }\\n  </style>\\n  <div class=\\"A\\">\\n    A\\n  </div>\\n</body>\\n\\n</html>\\n```\\n\\n#### 3.实现方式三\\n\\n- flex + 伪元素\\n\\n```js\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n\\n<head>\\n  <meta charset=\\"UTF-8\\">\\n  <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">\\n  <meta http-equiv=\\"X-UA-Compatible\\" content=\\"ie=edge\\">\\n  <title>居中</title>\\n</head>\\n\\n<body>\\n  <style>\\n    html,\\n    body {\\n      padding: 0;\\n      margin: 0;\\n      height: 100%;\\n    }\\n\\n    body {\\n      display: flex;\\n      align-items: center;\\n    }\\n\\n    .A {\\n      flex: 1;\\n      margin: 0 10px;\\n      padding-top: 50%;\\n      position: relative;\\n      background: #999;\\n    }\\n\\n    .A::after {\\n      content: \'A\';\\n      display: block;\\n      font-size: 20px;\\n      position: absolute;\\n      /* 样式1 */\\n      top: 50%;\\n      left: 50%;\\n      transform: translate(-50%, -50%);\\n\\n      /* 样式2 */\\n      /* top: 0%;\\n            left: 0%;\\n            width: 100%;\\n            height: 100%;\\n            display: flex;\\n            align-items: center;\\n            justify-content: center; */\\n    }\\n  </style>\\n  <div class=\\"A\\"></div>\\n</body>\\n\\n</html>\\n```\\n\\n\\n说一下对 vue3.0 的了解，vue3.0 为什么要用代理?是怎么用 proxy 实现数据监听的?\\n\\n知道语义化吗？说说你理解的语义化，如果是你，平时会怎么做来保证语义化？说说你了解的 HTML5 语义化标签？","answer":"","biz_type":1,"qid":772,"subject":"```js\\n/* \\n  A元素垂直居中于屏幕中央\\n  A元素距离屏幕左右边距各10px\\n  A元素里面的文字A的font-size:20px；水平垂直居中\\n  A元素的高度始终是A元素宽度的50%；(如果搞不定可以实现为A元素的高度固定为200px)\\n  \\n  请用html及css实现\\n*/\\n```\\n","title":"屏幕正中间有个元素A，元素A中有文字A，随着屏幕宽度的增加，始终需要满足下列条件"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["玄武科技"],"date":"Fri, 19 Jun 2020 16:20:44 GMT","favorite_num":9,"qid":711,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":711,"subject":"","title":"请画出 css 盒模型，基于盒模型的原理，说明相对定位、绝对定位、浮动实现样式是如何实现的？"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["玄武科技"],"date":"Fri, 19 Jun 2020 16:20:44 GMT","favorite_num":3,"qid":712,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":712,"subject":"","title":"列举出 css 选择器有哪些分类，并至少写出三个 css 选择器之间的区别，适用场景"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["快手"],"date":"Fri, 19 Jun 2020 16:20:44 GMT","favorite_num":4,"qid":745,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":745,"subject":"","title":"Css 实现 div 宽度自适应，宽高保持等比缩放"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["快手"],"date":"Fri, 19 Jun 2020 16:20:44 GMT","favorite_num":4,"qid":746,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":746,"subject":"","title":"ul 内部除最后一个 li 以外设置右边框效果"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["快手"],"date":"Fri, 19 Jun 2020 16:20:44 GMT","favorite_num":2,"qid":747,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":747,"subject":"","title":"flex:1 的完整写法是？分别是什么意思？"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":[],"date":"Fri, 19 Jun 2020 16:20:44 GMT","favorite_num":2,"qid":754,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":754,"subject":"","title":"行内元素和块级元素有什么区别"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":[],"date":"Fri, 19 Jun 2020 16:20:44 GMT","favorite_num":4,"qid":755,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":755,"subject":"","title":"link 和@inmport 区别"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["会小二"],"date":"Fri, 19 Jun 2020 16:20:43 GMT","favorite_num":3,"qid":604,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":604,"subject":"```js\\nA.font\\nB.margin\\nC.padding\\nD.visible\\nE.border\\n\\n```\\n","title":"以下选项为 css 盒模型属性有哪些？(多选题)"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["快手","会小二"],"date":"Fri, 19 Jun 2020 16:20:43 GMT","favorite_num":3,"qid":620,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":620,"subject":"","title":"说下盒模型的区别？介绍一下标准的 CSS 盒模型？border-box 和 content-box 有什么区别？"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["快手"],"date":"Fri, 19 Jun 2020 16:20:43 GMT","favorite_num":3,"qid":652,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":652,"subject":"","title":"Css 单位都有哪些？"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["快手"],"date":"Fri, 19 Jun 2020 16:20:43 GMT","favorite_num":7,"qid":653,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":653,"subject":"","title":"Css 实现多列等高布局，要求元素实际占用的高度以多列中较高的为准"},"tech_tag":["Css","编程题"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["快手"],"date":"Fri, 19 Jun 2020 16:20:43 GMT","favorite_num":2,"qid":654,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":654,"subject":"","title":"一个标签的 class 样式的渲染顺序，id、class、标签、伪类的优先级"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["头条"],"date":"Fri, 19 Jun 2020 16:20:43 GMT","favorite_num":2,"qid":672,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":672,"subject":"","title":"css 如何实现动画"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["酷狗"],"date":"Fri, 19 Jun 2020 16:20:43 GMT","favorite_num":2,"qid":686,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":686,"subject":"","title":"Css 如何实现一个半圆"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["阿里"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":2,"qid":355,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":355,"subject":"","title":"移动端适配 1px 的问题"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["阿里"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":2,"qid":356,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":356,"subject":"","title":"居中为什么要使用 transform（为什么不使用 marginLeft/marginTop）"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["网易"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":3,"qid":371,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":371,"subject":"","title":"介绍 css3 中 position:sticky"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["头条"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":2,"qid":404,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":404,"subject":"","title":"清除浮动的方式"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["有赞","腾讯应用宝"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":2,"qid":411,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":411,"subject":"","title":"transform 动画和直接使用 left、top 改变位置有什么优缺点"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["饿了么"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":3,"qid":455,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":455,"subject":"","title":"上下固定，中间滚动布局如何实现"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["兑吧"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":2,"qid":476,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":476,"subject":"","title":"如何实现高度自适应"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["兑吧"],"date":"Fri, 19 Jun 2020 16:20:42 GMT","favorite_num":2,"qid":480,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":480,"subject":"","title":"em 和 px 的区别"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["阿里","虎扑","快手"],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":2,"qid":267,"qtype":"short_answer","short_answer":{"analysis":"#### 1.父元素属性\\n\\n- **display:flex**  *定义了一个flex容器*\\n\\n- **flex-direction** *决定主轴的方向*\\n   - row *默认值，水平从左到右*\\n   - colunm *垂直从上到下*\\n   - row-reverse *水平从右到左*\\n   - *column-reverse *垂直从下到上*\\n- **flex-wrap** *定义如何换行*\\n  - nowrap *默认值，不换行*\\n  - wrap *换行*\\n  - wrap-reverse *换行，且颠倒行顺序，第一行在下方*\\n- **flex-flow** *属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为row nowrap*\\n- **justify-content** *设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式*\\n  - flex-start *默认值、弹性盒子元素将向行起始位置对齐*\\n  - flex-end *弹性盒子元素将向行结束位置对齐*\\n  - center *弹性盒子元素将向行中间位置对齐。该行的子元素将相互对齐并在行中居中对齐*\\n  - space-between *弹性盒子元素会平均地分布在行里*\\n  - space-around *弹性盒子元素会平均地分布在行里，两端保留子元素与子元素之间间距大小的一半*\\n- **align-items** *设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式*\\n  - flex-start *弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界*\\n  - flex-end *弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界*\\n  - center *弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）*\\n  - baseline *如弹性盒子元素的行内轴与侧轴为同一条，则该值与flex-start等效。其它情况下，该值将参与基线对齐。*\\n  - stretch *如果指定侧轴大小的属性值为\'auto\'，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照\'min/max-width/height\'属性的限制*\\n- **align-content** *设置或检索弹性盒堆叠伸缩行的对齐方式*\\n  - flex-start *各行向弹性盒容器的起始位置堆叠。弹性盒容器中第一行的侧轴起始边界紧靠住该弹性盒容器的侧轴起始边界，之后的每一行都紧靠住前面一行*\\n  - flex-end *各行向弹性盒容器的结束位置堆叠。弹性盒容器中最后一行的侧轴起结束界紧靠住该弹性盒容器的侧轴结束边界，之后的每一行都紧靠住前面一行*\\n  - center *各行向弹性盒容器的中间位置堆叠。各行两两紧靠住同时在弹性盒容器中居中对齐，保持弹性盒容器的侧轴起始内容边界和第一行之间的距离与该容器的侧轴结束内容边界与第最后一行之间的距离相等*\\n  - space-between *各行在弹性盒容器中平均分布。第一行的侧轴起始边界紧靠住弹性盒容器的侧轴起始内容边界，最后一行的侧轴结束边界紧靠住弹性盒容器的侧轴结束内容边界，剩余的行则按一定方式在弹性盒窗口中排列，以保持两两之间的空间相等*\\n  - space-around *各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。各行会按一定方式在弹性盒容器中排列，以保持两两之间的空间相等，同时第一行前面及最后一行后面的空间是其他空间的一半*\\n  - stretch *各行将会伸展以占用剩余的空间。剩余空间被所有行平分，以扩大它们的侧轴尺寸*\\n   \\n#### 2.子元素上属性\\n\\n- **.order** *默认情况下flex order会按照书写顺训呈现，可以通过order属性改变，数值小的在前面，还可以是负数*\\n- **flex-grow** *设置或检索弹性盒的扩展比率,根据弹性盒子元素所设置的扩展因子作为比率来分配剩余空间*\\n- **.flex-shrink** *设置或检索弹性盒的收缩比率,根据弹性盒子元素所设置的收缩因子作为比率来收缩空间*\\n- **flex-basis** *设置或检索弹性盒伸缩基准值，如果所有子元素的基准值之和大于剩余空间，则会根据每项设置的基准值，按比率伸缩剩余空间*\\n- **flex**  *flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选*\\n- **align-self** *设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式，可以覆盖父容器align-items的设置*","answer":"","biz_type":1,"qid":267,"subject":"","title":"介绍下 Flex 布局，属性都有哪些，都是干啥的"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["完美世界"],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":2,"qid":142,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":142,"subject":"","title":"Css 选择器都有什么，权重是怎么计算的"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["完美世界"],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":2,"qid":143,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":143,"subject":"","title":"布局都有什么方式，float 和 position 有什么区别"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["网易"],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":2,"qid":149,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":149,"subject":"","title":"`nth-child`和`nth-type-of` 有什么区别"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["网易"],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":2,"qid":150,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":150,"subject":"","title":"`<img>`是什么元素"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["网易"],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":2,"qid":151,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":151,"subject":"","title":"flex 布局，如何实现把八个元素分两行摆放"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["阿里","滴滴","易车","新东方","虎扑","饿了么","爱范儿","心娱","58"],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":3,"qid":172,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":172,"subject":"","title":"Css 方式实现一个不知道宽高的 div 居中都有哪几种方法"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["快手"],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":4,"qid":211,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":211,"subject":"```html\\n<style>\\n  div {\\n    color: red;\\n  }\\n  #title {\\n    color: yellow;\\n  }\\n  div.title {\\n    color: bule;\\n  }\\n</style>\\n<div class=\\"title\\" id=\\"title\\">abc</div>\\n```\\n","title":"以下 css 最后是什么颜色"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":[],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":2,"qid":230,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":230,"subject":"","title":"简述 Grid 布局"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["自如","头条"],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":6,"qid":233,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":233,"subject":"","title":"动手实现一个左右固定100px，中间自适应的三列布局？(至少三种)"},"tech_tag":["Css","编程题"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":[],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":6,"qid":252,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":252,"subject":"","title":"屏幕占满和未占满的情况下，使 footer 固定在底部，尽量多种方法"},"tech_tag":["Css","编程题"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["会小二","高思教育","58"],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":6,"qid":257,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":257,"subject":"","title":"Css 画一个三角形"},"tech_tag":["Css","编程题"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["虎扑"],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":2,"qid":265,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":265,"subject":"","title":"Css 超出省略怎么写，三行超出省略怎么写"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["虎扑"],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":2,"qid":266,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":266,"subject":"","title":"Css inherit、initial、unset 三者的区别"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":[],"date":"Fri, 19 Jun 2020 16:20:41 GMT","favorite_num":2,"qid":294,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":294,"subject":"","title":"响应式布局用到的技术，移动端需要注意什么"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["伴鱼"],"date":"Fri, 19 Jun 2020 16:20:40 GMT","favorite_num":2,"qid":86,"qtype":"short_answer","short_answer":{"analysis":"#### 分层与合成\\n\\n通常页面的组成是非常复杂的，有的页面里要实现一些复杂的动画效果，比如点击菜单时弹出菜单的动画特效，滚动鼠标滚轮时页面滚动的动画效果，当然还有一些炫酷的 3D 动画特效。如果没有采用分层机制，从布局树直接生成目标图片的话，那么每次页面有很小的变化时，都会触发重排或者重绘机制，这种“牵一发而动全身”的绘制策略会严重影响页面的渲染效率。\\n\\n为了提升每帧的渲染效率，Chrome 引入了分层和合成的机制。\\n\\n你可以把一张网页想象成是由很多个图片叠加在一起的，每个图片就对应一个图层，Chrome 合成器最终将这些图层合成了用于显示页面的图片。如果你熟悉 PhotoShop 的话，就能很好地理解这个过程了，PhotoShop 中一个项目是由很多图层构成的，每个图层都可以是一张单独图片，可以设置透明度、边框阴影，可以旋转或者设置图层的上下位置，将这些图层叠加在一起后，就能呈现出最终的图片了。\\n\\n在这个过程中，将素材分解为多个图层的操作就称为分层，最后将这些图层合并到一起的操作就称为合成。所以，分层和合成通常是一起使用的。\\n\\n考虑到一个页面被划分为两个层，当进行到下一帧的渲染时，上面的一帧可能需要实现某些变换，如平移、旋转、缩放、阴影或者 Alpha 渐变，这时候合成器只需要将两个层进行相应的变化操作就可以了，显卡处理这些操作驾轻就熟，所以这个合成过程时间非常短。\\n\\n\\n#### 生成层的方式\\n\\n在某些特定条件下，浏览器会主动将渲染层提至合成层，那么影响 composite 的因素有哪些？\\n\\n- 3D transforms: translate3d, translateZ 等;\\n- video, canvas, iframe 等元素;\\n- 通过 Element.animate() 实现的 opacity 动画转换;\\n- 通过 СSS 动画实现的 opacity 动画转换;\\n- position: fixed;\\n- will-change;\\n- filter;\\n- 有合成层后代同时本身 overflow 不为 visible（如果本身是因为明确的定位因素产生的 SelfPaintingLayer，则需要 z-index 不为 auto）\\n- ...","answer":"","biz_type":1,"qid":86,"subject":"","title":"什么情况会出现浏览器分层"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["快手","伴鱼","网易"],"date":"Fri, 19 Jun 2020 16:20:40 GMT","favorite_num":2,"qid":83,"qtype":"short_answer","short_answer":{"analysis":"#### 1.概念\\n\\n**BFC(Box Formatting context ):**  Box 是 CSS 布局的对象和基本单位，BFC就是页面上的一个隔离的独立 容器，容器里面的子元素不会影响到外面的元素。反之也如此。\\n\\n块级格式化上下文布局规则\\n\\n- 内部的BOX会在垂直方向一个接一个的放置；\\n- 属于同一个BFC的两个相邻Box的margin会重叠；不同BFC就不会；\\n- 是页面上一个隔离的独立容器，里面的元素不会影响到外面的元素；反之亦然；\\n- BFC的区域不会和float box重叠；\\n- 计算BFC的高度，浮动元素也参与计算；\\n\\n#### 2.触发条件\\n\\n**触发条件简要概括**\\n\\n- 根元素\\n- float属性不为none\\n- position为absolute或fixed\\n- overflow不为visible\\n- display为inline-block, table-cell, table-caption, flex, inline-flex。\\n\\n**触发条件详细介绍:**\\n\\n1. 根元素(<html>)\\n2. 浮动元素（元素的 float 不是 none）\\n3. 绝对定位元素（元素的 position 为 absolute 或 fixed）\\n4. 行内块元素（元素的 display 为 inline-block）\\n5. 表格单元格（元素的 display为 table-cell，HTML表格单元格默认为该值）\\n6. 表格标题（元素的 display 为 table-caption，HTML表格标题默认为该值）\\n7. 匿名表格单元格元素（元素的 display为 table、table-row、 table-row-group、table-header-group、table-footer-group（分别是HTML table、row、tbody、thead、tfoot的默认属性）或 inline-table）\\n8. overflow 值不为 visible 的块元素\\n9. display 值为 flow-root 的元素\\n10. contain 值为 layout、content或 paint 的元素\\n11. 弹性元素（display为 flex 或 inline-flex元素的直接子元素）\\n12. 网格元素（display为 grid 或 inline-grid 元素的直接子元素）\\n13. 多列容器（元素的 column-count 或 column-width 不为 auto，包括 column-count 为 1）\\n14. column-span 为 all 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中（标准变更，Chrome bug）。\\n\\n#### 3.应用场景\\n\\n**1）清除内部的浮动，触发父元素的BFC属性，会包含float元素；**\\n\\n防止浮动导致父元素高度塌陷父级设置overflow：hidden,元素float:right;\\n\\n**2）分属于不同的BFC，可以阻止Margin重叠；**\\n\\n避免margin重叠,两个块相邻就会导致外边距被折叠，给中间的设置BFC就会避免，方法就是套个父级设置overflow：hidden\\n\\n**3）阻止元素被浮动元素覆盖，各自是独立的渲染区域；**\\n\\n**4）自适应两栏布局；**\\n\\n","answer":"","biz_type":1,"qid":83,"subject":"","title":"BFC 是什么？触发 BFC 的条件是什么？有哪些应用场景？"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["伴鱼"],"date":"Fri, 19 Jun 2020 16:20:40 GMT","favorite_num":2,"qid":88,"qtype":"short_answer","short_answer":{"analysis":"#### 1.`<link>`标签不会阻塞DOM解析但会阻塞DOM渲染\\n\\n`<link>`标签并不会像带scr属性的`<script>`标签一样会触发页面paint。浏览器并行解析生成DOM` Tree 和 CSSOM Tree，当两者都解析完毕，才会生成rending tree，页面才会渲染。所以应尽量减小引入样式文件的大小，提高首屏展示速度。\\n\\n\\n#### 2.`<script>`标签会阻塞DOM的解析和渲染；\\n\\n`<script>`标签会阻塞DOM解析和渲染，但在阻塞同时，其他线程会解析文档的其余部分（预解析），找出并加载需要通过网络加载的其他资源。通过这种方式，资源可以在并行连接上加载，从而提高总体速度。预解析不会修改解析出来的 DOM 树，只会解析外部资源（例如外部脚本、样式表和图片）的引用。\\n\\n#### 3.优化\\n\\n- 合理放置脚本位置\\n- 预加载 Link preload\\n- DNS Prefetch 预解析\\n- script 延迟脚本加载 defer/async\\n\\n\\n#### 4.总结\\n\\nhtml代码中往往会引入一些额外的资源，比如图片、CSS、JS脚本等，图片和CSS这些资源需要通过网络下载或从缓存中直接加载，这些资源不会阻塞html的解析，因为他们不会影响DOM树的生成，但当HTML解析过程中遇到script标签，就会停止html解析流程，转而去加载解析并且执行JS。这是因为浏览器并不知道JS执行是否会改变当前页面的HTML结构，如果JS代码里用了document.write方法来修改html，之前的和html解析就没有任何意义了，这也就是为什么我们一直说要把script标签要放在合适的位置，或者使用async或defer属性来异步加载执行JS。\\n\\n","answer":"","biz_type":1,"qid":88,"subject":"","title":"通过 link 进来的 css 会阻塞页面渲染吗，Js 会阻塞吗，如果会如何解决？"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["头条"],"date":"Fri, 19 Jun 2020 16:20:40 GMT","favorite_num":7,"qid":48,"qtype":"short_answer","short_answer":{"analysis":"### 答案\\n\\n**简单版**\\n\\n```css\\n/* 简版一  */\\n.sector1 {\\n   border-radius: 0  0  0 200px;\\n   width: 200px;\\n   height: 200px;\\n   background: yellowgreen;\\n}\\n /* 简版二  */\\n.sector1 {\\n  width: 0;\\n  height: 0;\\n  border-width: 100px;\\n  border-style: solid;\\n  border-color: transparent transparent red;\\n  border-radius: 100px;\\n}\\n\\n```\\n\\n**1）实现方式一**\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n<head>\\n  <meta charset=\\"UTF-8\\">\\n  <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">\\n  <meta http-equiv=\\"X-UA-Compatible\\" content=\\"ie=edge\\">\\n  <title>使用css3绘制任意角度扇形</title>\\n  <style>\\n  .pie {\\n    position: relative;\\n    margin: 1em auto;\\n    padding: 0;\\n    width: 32em;\\n    height: 32em;\\n    border-radius: 100%;\\n    list-style: none;\\n    overflow: hidden;\\n    transform: rotate(0deg) /*针对mac safari浏览器兼容*/\\n\\n  }\\n  .slice {   /*一个slice最多设置成一个90度的扇形，超过就需要多个slice进行拼接*/\\n    overflow: hidden;\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    width: 50%;\\n    height: 50%;\\n    transform-origin: 0% 100%;/*设置旋转的基准点*/\\n  }\\n  .slice-1 {\\n    transform: rotate(-36deg) skewY(-54deg);/*通过配置rotate和skewY的值来设置扇形的角度和位置*/\\n    background: #FF0088;\\n }\\n  .slice-2 {\\n    transform: rotate(-72deg) skewY(-54deg);\\n    background: #FF0000;\\n }\\n \\n  </style>\\n</head>\\n<body>\\n   <ul class=\'pie\'>\\n      <li class=\'slice-1 slice\'> </li>\\n      <li class=\'slice-2 slice\'> </li>\\n  <ul>\\n</body>\\n</html>\\n```\\n\\n\\n**2）实现方式二**\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"UTF-8\\" />\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\" />\\n    <title>扇形绘制</title>\\n    <style>\\n      .shanxing {\\n        position: relative;\\n        width: 200px;\\n        height: 200px;\\n        border-radius: 100px;\\n        background-color: yellow;\\n      }\\n      .sx1 {\\n        position: absolute;\\n        width: 200px;\\n        height: 200px;\\n        transform: rotate(0deg);\\n        clip: rect(\\n          0px,\\n          100px,\\n          200px,\\n          0px\\n        ); /*这个clip属性用来绘制半圆，在clip的rect范围内的内容显示出来，使用clip属性，元素必须是absolute的 */\\n        border-radius: 100px;\\n        background-color: #f00;\\n        /*-webkit-animation: an1 2s infinite linear; */\\n      }\\n      .sx2 {\\n        position: absolute;\\n        width: 200px;\\n        height: 200px;\\n        transform: rotate(0deg);\\n        clip: rect(0px, 100px, 200px, 0px);\\n        border-radius: 100px;\\n        background-color: #f00;\\n        /*-webkit-animation: an2 2s infinite linear;*/\\n      }\\n      /*绘制一个60度扇形*/\\n      .shanxing1 .sx1 {\\n        transform: rotate(-30deg);\\n      }\\n      .shanxing1 .sx2 {\\n        transform: rotate(-150deg);\\n      }\\n\\n      /*绘制一个85度扇形*/\\n      .shanxing2 .sx1 {\\n        transform: rotate(-45deg);\\n      }\\n      .shanxing2 .sx2 {\\n        transform: rotate(-140deg);\\n      }\\n\\n      /*绘制一个向右扇形，90度扇形*/\\n      .shanxing3 .sx1 {\\n        transform: rotate(45deg);\\n      }\\n      .shanxing3 .sx2 {\\n        transform: rotate(-45deg);\\n      }\\n\\n      /*绘制一个颜色扇形 */\\n      .shanxing4 .sx1 {\\n        transform: rotate(45deg);\\n        background-color: #fff;\\n      }\\n      .shanxing4 .sx2 {\\n        transform: rotate(-45deg);\\n        background-color: #fff;\\n      }\\n\\n      /*绘制一个不同颜色半圆夹角 */\\n      .shanxing5 .sx1 {\\n        transform: rotate(45deg);\\n        background-color: #f00;\\n      }\\n      .shanxing5 .sx2 {\\n        transform: rotate(-45deg);\\n        background-color: #0f0;\\n      }\\n    </style>\\n  </head>\\n  <body>\\n    <h2>CSS之如何绘制任意角度的扇形</h2>\\n    <div>\\n      扇形制作原理，底部一个纯色原形， 里面2个相同颜色的半圆，可以是白色,\\n      内部半圆按一定角度变化，就可以产生出扇形效果\\n    </div>\\n    <div class=\\"shanxing\\">\\n      <div class=\\"sx1\\"></div>\\n      <div class=\\"sx2\\"></div>\\n    </div>\\n    <div class=\\"shanxing shanxing1\\">\\n      <div class=\\"sx1\\"></div>\\n      <div class=\\"sx2\\"></div>\\n    </div>\\n    <div class=\\"shanxing shanxing2\\">\\n      <div class=\\"sx1\\"></div>\\n      <div class=\\"sx2\\"></div>\\n    </div>\\n    <div class=\\"shanxing shanxing3\\">\\n      <div class=\\"sx1\\"></div>\\n      <div class=\\"sx2\\"></div>\\n    </div>\\n    <div class=\\"shanxing shanxing4\\">\\n      <div class=\\"sx1\\"></div>\\n      <div class=\\"sx2\\"></div>\\n    </div>\\n    <div class=\\"shanxing shanxing5\\">\\n      <div class=\\"sx1\\"></div>\\n      <div class=\\"sx2\\"></div>\\n    </div>\\n  </body>\\n</html>\\n```\\n","answer":"","biz_type":1,"qid":48,"subject":"","title":"Css 如何画出一个扇形，动手实现下"},"tech_tag":["Css","编程题"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["兑吧"],"date":"Fri, 19 Jun 2020 16:20:40 GMT","favorite_num":2,"qid":45,"qtype":"short_answer","short_answer":{"analysis":"### 答案\\n\\n**1.什么是盒模型**\\n\\n盒模型是css中的一种基础设计模式，web页面中的所有元素都可以当做一个盒模型，每一个盒模型都是由 display，position，float， width，height，margin，padding和border等属性组合所构成的，不同类型的盒模型会有不一样的布局，css中主要有 inline, inline-block, block, table, absolute position, float 等类型。\\n\\n**2.W3C标准模型和IE的传统模型(IE6以下)**\\n\\ncss中的盒模型有两种：W3C标准模型和IE的传统模型，相同之处是都是对web中元素计算尺寸的模型， 不同之处在于两者的计算方式不同。\\n\\nw3c盒子模型的范围包括margin、border、padding、content,并且content部分不包含其他部分，IE盒子模型的范围包括margin、border、padding、content,和w3c盒子模型不同的是，IE盒子模型的content部分包含了padding和border\\n\\n**3.W3C标准模型中元素尺寸的计算方式**\\n\\nheight(空间高度) = 内容高度 + 内距 + 边框 + 外距   （height为内容高度）\\n\\nwidth(空间宽度) = 内容宽度 + 内距 + 边框 + 外距    （width为内容宽度）\\n\\n**4.IE的传统模型中元素尺寸的计算方式**\\n\\nheight(空间高度) = 内容高度 + 外距  （height包含了 元素内容高度，边框， 内距）\\n\\nwidth(空间宽度) = 内容宽度 + 外距  （width包含了 元素内容宽度，边框， 内距）\\n\\n**5.代码示例**\\n\\n```css\\n.box{\\n    border:20px solid;\\n    padding:30px;\\n    margin:30px;\\n    background:red;\\n    width:300px;\\n}\\n/* 标准模型 空间宽度 = 300 + 20*2 + 30*2 + 30*2  */\\n/* IE的传统模型 空间宽度  = 300 + 30*2  */\\n/* IE的传统模型中的width是包括了padding和border的，而标准模型不包括，不管padding和borde加多少内容区域的宽度不会改变。 */\\n```\\n\\n**6.CSS如何设置标准模型和IE模型**\\n\\nbox-sizing: content-box   标准盒模型\\n\\nbox-sizing: border-box   IE的传统模型\\n","answer":"","biz_type":1,"qid":45,"subject":"","title":"说一下盒子模型，以及标准情况和 IE 下的区别"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["头条"],"date":"Fri, 19 Jun 2020 16:20:40 GMT","favorite_num":2,"qid":137,"qtype":"short_answer","short_answer":{"analysis":"### 一、CSS预处理器\\n\\n为CSS增加**编程特性**的拓展语言，可以使用变量、简单逻辑判断、函数等基本编程技巧；\\n\\nCSS预处理器编译输出还是标准的CSS样式\\n\\nLess、Sass都是是动态的样式语言，是CSS预处理器,CSS上的一种抽象层。他们是一种特殊的语法/语言而编译成CSS。\\n\\nless变量符号是@，Sass变量符号是$;\\n\\n### 二、解决的问题\\n\\n- CSS语法不够强大，因为**无法嵌套**导致有很多**重复的选择器**\\n- 没有变量和合理的样式**复用机制**，导致逻辑上相关的属性值只能以字面量的形式重复输出，难以维护\\n\\n### 三、常用规范\\n\\n变量、嵌套语法、混入、@import、运算、函数、继承等\\n\\n### 四、CSS预处理器带来的好处\\n\\n- CSS代码更加整洁，更易维护，代码量更少\\n- 修改更快,基础颜色使用变量,一处动处处动.\\n- 常用代码使用代码块,节省大量代码\\n- CSS嵌套减少了大量的重复选择器，避免一些低级错误\\n- 变量、混入大大提升了样式的复用性\\n- 额外的工具类似颜色函数(`lighten`, `darken`, `transparentize`等等)，mixins，loops，这些方法使css更像一个真正的编程语言，让开发者能够有能力生成更加复杂的css样式。\\n\\n> 编译需要一定时间","answer":"","biz_type":1,"qid":137,"subject":"","title":"说一下 Css 预处理器，Less 带来的好处？"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["滴滴","伴鱼","菜鸟网络","58"],"date":"Fri, 19 Jun 2020 16:20:40 GMT","favorite_num":3,"qid":85,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":85,"subject":"","title":"说一下什么是重绘重排，哪些操作会造成重绘重排"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["头条"],"date":"Fri, 19 Jun 2020 16:20:40 GMT","favorite_num":6,"qid":129,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":129,"subject":"","title":"使用 Css 实现一个水波纹效果"},"tech_tag":["Css","编程题"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["头条"],"date":"Fri, 19 Jun 2020 16:20:40 GMT","favorite_num":2,"qid":130,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":130,"subject":"","title":"position 定位都有什么属性（不仅仅是绝对定位和相对定位/fix 定位）"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["头条"],"date":"Fri, 19 Jun 2020 16:20:40 GMT","favorite_num":2,"qid":131,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":131,"subject":"```js\\nvar a = { k1: 1 };\\nvar b = a;\\na.k3 = a = { k2: 2 };\\nconsole.log(a); // ?\\nconsole.log(b); // ?\\n```\\n","title":"写出打印结果，并解释为什么"},"tech_tag":["Css"],"uid":0,"uname":""},{"audit_flag":0,"corp_tag":["头条"],"date":"Fri, 19 Jun 2020 16:20:40 GMT","favorite_num":2,"qid":136,"qtype":"short_answer","short_answer":{"analysis":"","answer":"","biz_type":1,"qid":136,"subject":"```js\\nlet urls = [\'http://dcdapp.com\', …];\\n/*\\n\\t*实现一个方法，比如每次并发的执行三个请求，如果超时（timeout）就输入null，直到全部请求完\\n\\t*batchGet(urls, batchnum=3, timeout=3000);\\n\\t*urls是一个请求的数组，每一项是一个url\\n\\t*最后按照输入的顺序返回结果数组[]\\n*/\\n```\\n","title":"实现一个多并发的请求"},"tech_tag":["Css"],"uid":0,"uname":""}],"page":1,"pages":1},"status":0}')}}]);